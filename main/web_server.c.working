//#include "web_server.h"
#include "esp_http_server.h"
#include "nvs_store.h"
#include "esp_macros.h"

#ifndef MIN
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#endif

extern float current_temp;
extern float target_temp;
extern bool relay_on;

static const char *index_html =
"<!DOCTYPE html>"
"<html lang=\"en\">"
"<head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">"
"<title>ESP32 Temp Controller</title>"
"<style>"
"body{font-family:'Segoe UI',sans-serif;margin:0;background:#f3f4f6;color:#111827;display:flex;flex-direction:column;align-items:center;padding:2rem;}"
".container{max-width:400px;width:100%;background:#fff;padding:2rem;border-radius:16px;box-shadow:0 10px 20px rgba(0,0,0,0.1);}"
"h1{font-size:1.5rem;text-align:center;margin-bottom:1rem;}"
".temp-display{text-align:center;font-size:2rem;font-weight:bold;margin-bottom:1rem;}"
".status-display{text-align:center;font-size:1rem;margin-bottom:1.5rem;color:#10b981;font-weight:bold;}"
"form{display:flex;flex-direction:column;gap:1rem;}"
"label{font-size:0.9rem;}"
"input[type=number]{padding:0.5rem;font-size:1rem;border:1px solid #d1d5db;border-radius:8px;}"
"button{padding:0.75rem;font-size:1rem;background:#3b82f6;color:white;border:none;border-radius:8px;cursor:pointer;transition:background 0.2s;}"
"button:hover{background:#2563eb;}"
".toast{margin-top:1rem;display:none;padding:0.5rem;background:#4ade80;color:#065f46;text-align:center;border-radius:8px;}"
"</style></head>"
"<body><div class=\"container\">"
"<h1>Temperature Controller</h1>"
"<div class=\"temp-display\" id=\"temp\">-- °C</div>"
"<div class=\"status-display\" id=\"relay-status\">Output Relay Status : --</div>"
"<form id=\"temp-form\">"
"<div><label for=\"target\">Set Target Temperature</label>"
"<input type=\"number\" step=\"0.1\" id=\"target\" name=\"target\" value=\"%.2f\" required></div>"
"<button type=\"submit\">Update Settings</button></form>"
"<div class=\"toast\" id=\"toast\">Settings Updated!</div></div>"
"<script>"
"function fetchTemp(){fetch(\"/data\").then(res=>res.json()).then(data=>{document.getElementById(\"temp\").innerText=`${data.temp} °C`;});}"
"function fetchStatus(){fetch(\"/status\").then(res=>res.json()).then(data=>{document.getElementById(\"relay-status\").innerText=`Output Relay : ${data.relay_on}`;});}"
"document.getElementById(\"temp-form\").addEventListener(\"submit\",function(e){e.preventDefault();"
"const target=document.getElementById(\"target\").value;"
"fetch(\"/set\",{method:\"POST\",headers:{\"Content-Type\":\"application/x-www-form-urlencoded\"},"
"body:`target=${target}`})"
".then(()=>{document.getElementById(\"toast\").style.display=\"block\";setTimeout(()=>document.getElementById(\"toast\").style.display=\"none\",2000);});});"
"fetchTemp();fetchStatus();setInterval(fetchTemp,100);setInterval(fetchStatus,100);"
"</script></body></html>";


esp_err_t index_get(httpd_req_t *req) {
    httpd_resp_send(req, index_html, HTTPD_RESP_USE_STRLEN);
    return ESP_OK;
}
/*
esp_err_t temp_post(httpd_req_t *req) {
    char buf[100];
    httpd_req_recv(req, buf, MIN(req->content_len, sizeof(buf)));
    char *target = strstr(buf, "target=");
    if (target) {
        target_temp = atof(target + 7);
        save_target_temp(target_temp);
    }
    httpd_resp_send(req, "OK", 2);
    return ESP_OK;
}
*/

//save target to nvs

esp_err_t temp_post(httpd_req_t *req) {
    char buf[100];
    int ret = httpd_req_recv(req, buf, MIN(req->content_len, sizeof(buf)));
    if (ret <= 0) return ESP_FAIL;

    buf[ret] = '\0';

    char *target_str = strstr(buf, "target=");

    if (target_str) {
        target_temp = atof(target_str + 7);
	//save to nvs
	save_config_to_nvs(target_temp);
    }
    
    httpd_resp_sendstr(req, "OK");
    return ESP_OK;
}
//get target from nvs

esp_err_t get_target_handler(httpd_req_t *req) {
   /* 
    nvs_handle_t nvs_handle;
    if (nvs_open("storage", NVS_READONLY, &nvs) == ESP_OK) {
        nvs_get_i32(nvs, "target_temp", &target_temp);
        nvs_close(nvs_handle);
    }
    */
    load_config_from_nvs(&target_temp);
    char resp[32];
    snprintf(resp, sizeof(resp), "%.2f", (float)target_temp);
    httpd_resp_set_type(req, "text/plain");
    httpd_resp_send(req, resp, HTTPD_RESP_USE_STRLEN);
    return ESP_OK;
}

//updated data_get for current_temp
esp_err_t data_get(httpd_req_t *req) {
    char resp[64];
    snprintf(resp, sizeof(resp), "{\"temp\": %.2f}", current_temp);
    httpd_resp_set_type(req, "application/json");
    httpd_resp_sendstr(req, resp);
    return ESP_OK;
}
//relay status get

esp_err_t status_get(httpd_req_t *req) {
    const char *status = relay_on ? "ON" : "OFF";
    char resp[32];
    snprintf(resp, sizeof(resp), "{\"relay_on\": \"%s\"}", status);
    httpd_resp_set_type(req, "application/json");
    httpd_resp_sendstr(req, resp);
    return ESP_OK;
}

void start_webserver(void) {
    httpd_config_t config = HTTPD_DEFAULT_CONFIG();
    httpd_handle_t server = NULL;

    if (httpd_start(&server, &config) == ESP_OK) {
        httpd_uri_t index_uri = {
            .uri = "/",
            .method = HTTP_GET,
            .handler = index_get,
            .user_ctx = NULL
        };
        httpd_register_uri_handler(server, &index_uri);

        httpd_uri_t post_uri = {
            .uri = "/set",
            .method = HTTP_POST,
            .handler = temp_post,
            .user_ctx = NULL
        };
        httpd_register_uri_handler(server, &post_uri);

        httpd_uri_t data_uri = {
            .uri = "/data",
            .method = HTTP_GET,
            .handler = data_get,
            .user_ctx = NULL
        };
        httpd_register_uri_handler(server, &data_uri);

        httpd_uri_t status_uri = {
            .uri = "/status",
            .method = HTTP_GET,
            .handler = status_get,
            .user_ctx = NULL
        };
        httpd_register_uri_handler(server, &status_uri);
	//get target temp
	httpd_uri_t get_target_uri = {
            .uri       = "/target",
            .method    = HTTP_GET,
            .handler   = get_target_handler,
            .user_ctx  = NULL
       };
       httpd_register_uri_handler(server, &get_target_uri);

	//
    }
}

